{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectTodo","selectedTodoID","className","map","todo","id","completed","title","type","onClick","TodoFilter","changeCompleted","changeActive","changeAll","qwery","findQwery","resetQwery","onChange","event","target","value","placeholder","style","pointerEvents","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","get","url","a","fullURL","fetch","then","res","json","TodoModal","state","user","selectedTodo","loader","this","props","selectedTod","find","userId","setState","href","email","name","Component","App","filteredTodos","loading","todoId","handlechangeAll","prevState","handlechangeCompleted","filter","handlechangeActive","toLowerCase","includes","trim","todoIDfromlist","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.668149e7.chunk.js","sourcesContent":["import React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n  selectTodo: (todoIDfromlist: number | string) => void\n  selectedTodoID:number | string\n};\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectTodo,\n  selectedTodoID,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n          <td className=\"is-vcentered\">\n            {todo.id}\n          </td>\n          <td className=\"is-vcentered\">\n            {todo.completed\n              ? (\n                <span className=\"icon\" data-cy=\"completed\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )\n              : ''}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={todo.completed ? 'has-text-success'\n                : 'has-text-danger'}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            {selectedTodoID === todo.id ? (\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  selectTodo(0);\n                }}\n              >\n                <span className=\"icon\">\n                  <i className=\"far fa-eye-slash\" />\n                </span>\n              </button>\n            ) : (\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  selectTodo(todo.id);\n                }}\n              >\n                <span className=\"icon\">\n                  <i className=\"far fa-eye\" />\n                </span>\n              </button>\n            )}\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","type Props = {\n  changeCompleted : () => void\n  changeActive: () => void\n  changeAll:() => void\n  qwery: string\n  findQwery: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  resetQwery: () => void\n};\n\nexport const TodoFilter : React.FC<Props> = ({\n  changeCompleted,\n  changeActive,\n  changeAll,\n  qwery,\n  findQwery,\n  resetQwery,\n}) => {\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = event.target.value;\n\n    switch (selectedValue) {\n      case 'all':\n        changeAll();\n        break;\n      case 'active':\n        changeActive();\n        break;\n      case 'completed':\n        changeCompleted();\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelectChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={qwery}\n          onChange={findQwery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {qwery && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={resetQwery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nasync function get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  await wait(300);\n\n  // we add some delay to see how the loader works\n  return fetch(fullURL)\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { Component } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  todos: Todo[];\n  selectTodo: (todoIDfromlist: number | string) => void\n  selectedTodoID:number | string\n};\n\ntype State = {\n  user: User ;\n  selectedTodo: Todo;\n  loader:boolean\n};\n\nexport class TodoModal extends Component<Props, State> {\n  state = {\n    user: {} as User,\n    selectedTodo: {} as Todo,\n    loader: true,\n  };\n\n  async componentDidMount() {\n    const { todos, selectedTodoID } = this.props;\n    const selectedTod = todos.find(todo => todo.id === selectedTodoID);\n\n    if (selectedTod) {\n      const user = await getUser(selectedTod.userId);\n\n      this.setState({ user, selectedTodo: selectedTod, loader: false });\n    }\n  }\n\n  render() {\n    const { user, selectedTodo, loader } = this.state;\n    const { selectTodo } = this.props;\n\n    return (\n      <div className=\"modal is-active\" data-cy=\"modal\">\n        <div className=\"modal-background\" />\n        <div className=\"modal-card\">\n          {(!user || loader) ? <Loader /> : '' }\n          {!loader && (\n            <>\n              <header className=\"modal-card-head\">\n                <div\n                  className=\"modal-card-title has-text-weight-medium\"\n                  data-cy=\"modal-header\"\n                >\n                  {`Todo #${selectedTodo.id}`}\n                </div>\n\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  onClick={() => {\n                    selectTodo(0);\n                  }}\n                />\n              </header>\n              <div className=\"modal-card-body\">\n                <p className=\"block\" data-cy=\"modal-title\">\n                  {selectedTodo.title}\n                </p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {selectedTodo.completed\n                    ? <strong className=\"has-text-success\">Done</strong>\n                    : <strong className=\"has-text-danger\">Planned</strong>}\n                  {' by '}\n                  <a href={`mailto:${user.email}`}>\n                    {user.name}\n                  </a>\n                </p>\n              </div>\n            </>\n          )}\n\n        </div>\n      </div>\n    );\n  }\n}\n","import 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport React from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\ninterface State {\n  todos: Todo[];\n  filteredTodos: Todo[];\n  loading: boolean;\n  todoId: number | string;\n  qwery: string;\n}\n\nexport class App extends React.Component<{}, State> {\n  state:State = {\n    todos: [],\n    filteredTodos: [],\n    loading: true,\n    todoId: 0,\n    qwery: '',\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => {\n        this.setState({ todos, filteredTodos: todos, loading: false });\n      });\n  }\n\n  handlechangeAll = () => {\n    this.setState(prevState => {\n      return { filteredTodos: prevState.todos };\n    });\n  };\n\n  handlechangeCompleted = () => {\n    this.setState(prevState => {\n      const completedTodos\n      = prevState.todos.filter(todo => todo.completed === true);\n\n      return { filteredTodos: completedTodos };\n    });\n  };\n\n  handlechangeActive = () => {\n    this.setState(prevState => {\n      const active = prevState.todos.filter(todo => todo.completed === false);\n\n      return { filteredTodos: active };\n    });\n  };\n\n  findQwery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const qwery = event.target.value;\n\n    this.setState({ qwery });\n\n    this.setState(prevState => {\n      const filteredTodos\n        = prevState.filteredTodos.filter(todo => todo.title.toLowerCase()\n          .includes(qwery.toLowerCase().trim()));\n\n      return { filteredTodos };\n    });\n  };\n\n  resetQwery = () => {\n    this.setState({ qwery: '' });\n    this.handlechangeAll();\n  };\n\n  render() {\n    const {\n      filteredTodos,\n      loading,\n      todoId,\n      qwery,\n    } = this.state;\n\n    return (\n      <>\n        <div className=\"section\">\n          <div className=\"container\">\n            <div className=\"box\">\n              <h1 className=\"title\">Todos:</h1>\n\n              <div className=\"block\">\n                <TodoFilter\n                  qwery={qwery}\n                  findQwery={this.findQwery}\n                  changeCompleted={this.handlechangeCompleted}\n                  changeActive={this.handlechangeActive}\n                  changeAll={this.handlechangeAll}\n                  resetQwery={this.resetQwery}\n                />\n              </div>\n\n              <div className=\"block\">\n                {loading ? <Loader /> : ''}\n                <TodoList\n                  todos={filteredTodos}\n                  selectedTodoID={todoId}\n                  selectTodo={(todoIDfromlist:number | string) => {\n                    this.setState({ todoId: todoIDfromlist });\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {todoId !== 0\n           && (\n             <TodoModal\n               todos={filteredTodos}\n               selectedTodoID={todoId}\n               selectTodo={(todoIDfromlist:number | string) => {\n                 this.setState({ todoId: todoIDfromlist });\n               }}\n             />\n           )}\n      </>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}